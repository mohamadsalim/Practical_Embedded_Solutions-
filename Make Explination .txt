#Target : mostlly it's a file will be represented from the executed cmd's 

#Types of Targets 
1-File target : Target which will be represented from the execution cmd (recipe)
                 and mostlly it has the same name of represented file 
				 also we can devide it into two types(Default Target , Normal Target),
				 normal target it's a target as we mantiend before , it's a represented file , 
				 default target it's not a represnted file and it has some sprcial charactristics 
				 1- the naming of represented file from the execution cmd's not the same naming of the default target 
                 2- we should set it at the first of the make file because it should be executed every time make works on
                    ,that is because it's prerequsets always are a newer than the default target   				 

2-Special Targets : GNU MAKE provide multi special target to perform specific actions
                Like :  
                 1- Phony Target : Target it's not a represented file and it's name is the naming of the recipe to be executed 
                   when you make an explict request , PHONY target is a special target which provieded from GNU Make Tool  
 

                 2- Empty Target : it's an empty file represented to timestamp or event time purpose in generall  


NOTE: we can set two target with the same prerequsets and the same commands script
 for examble : 
          main.o app.o : main.c app.c app.h 
		                gcc -o main.c 
						gcc -o app.c

#Making Mechanism 
  - Target > Prerequists  -> target is up to date 
  - Target < prerequsets  -> target is out of date
  
#Variables
  - Automatic Variable (user-defined , Make defined)
    automatic variables will expand by Make when the Rule is matched, 
    using $() will issue Make to expand the Automatic Variable	
  - Examples on automatic variables 
         $<  == the naming of the first prerequset 
         $@  == the naiming of the target 
         $*  == the naming of the target without suffex 
         $^  == all prerequset  
         $?  == all prerequsets that are newer than the target ,sperated by space 

    also 
        - VPATH to list the paths of dircetories to be known by make , make uses this lists to search for a specific files in all lists presented      		
	    - vpath to make 'MAKE' search on specific dircetories for a specific file , so it reduce the time of searching
	    - project 3.1 and 3.2 are case study of this topic     

#Internal Rules 
		make has internal rules in itself , it uses it to resolve the targets that hasn't it's execution cmd
		internal rules may be one of two methods : (pattern rules or suffix rules) 
	
#Pattern Rules :	
		- it is an implicit rules it is look like normal rules except the stem of file (the portion before the sffuix 
          is represented by % sign) 
        - you can print all of internal implict rules in make's data base by write this command 
		  (make -- print-data-base)
		- project 3.3 is the case study of this rules 	
	    - the(%)char in make file like (*) in unix shell it representes any number of any character 
#Sufix Rules : 
		- it is an implict rule also and it's like pattern rule 
		- project 3.4 is a case study of this rule 
		
 
(note)
- the pattern rule is more generic than sufix and it's usage wide more than sufix so it's useed for portable and genraic purpose  
- so it's useful to use sufix rules but it's not usally used in all MAKE Ver 	 
- using pattern rule as an implict rule is useful than using sufix rules for the above resons 
- you can only use suffix recognaized by special targeet known as .SUFFIXES, 
also you can add  Suffix in your MAKE through typing (.SUFFIXES: .pdf .word .xml ,etc)
- if you need to delete the internal suffix for any reson you can define it without any prerequists 
like this (.Sffixes: )	
- the defualt suffix defined in Special target called (.SUFFIXES) :	
.SUFFIXES: .out .a .ln .o .c .cc .c .cpp .p .f .f .m .r .y .l .ym .yl .s .s .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el
- IN internal rules we may use variables are already predefined by MAKE  and these variables defintions sholud be Known
  for us to ba carful when we use it , for instance : 
in this rule we generate obj file from it's source file 
and we use some of predefined variables shown in below  
  .o:.c 
	 $(COMPILER.c) $(CC) $(OUTPUT_OPTIONS) 
here we should know that CC varible is defined by gcc compiler so we should  be carful when use these variables defintions 
in specific hw targets in embedded , so we can change this CC defintion by arm_noip_gcc for ex to be compatable with our devices 	 
CC = gcc 
	
#Automatic Dependancy Generation
- in gcc compiler and other c/c++ compiler has or have an option to write all dependancy of source file
  ,this option is -M , so gcc read the source file then write it's depdencies of makefile 
  

	
	